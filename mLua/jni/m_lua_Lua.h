/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "lua/lua.h"
#include "lua/lualib.h"
#include "lua/lauxlib.h"


/* Header for class m_lua_Lua */

#ifndef _Included_m_lua_Lua
#define _Included_m_lua_Lua
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     m_lua_Lua
 * Method:    nativeOpen
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_m_lua_Lua_nativeOpen
  (JNIEnv *, jobject);

/*
 * Class:     m_lua_Lua
 * Method:    close
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_close
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    newthread
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_m_lua_Lua_newthread
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    getTop
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_getTop
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    setTop
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_setTop
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    pushValue
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_pushValue
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    remove
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_remove
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    insert
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_insert
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    replace
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_replace
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    checkStack
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_checkStack
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    nativeXmove
 * Signature: (JJI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_nativeXmove
  (JNIEnv *, jobject, jlong, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    isNumber
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_m_lua_Lua_isNumber
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    isString
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_m_lua_Lua_isString
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    isCFunction
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_m_lua_Lua_isCFunction
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    isUserdata
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_m_lua_Lua_isUserdata
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    type
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_type
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    typeName
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_m_lua_Lua_typeName
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    equal
 * Signature: (JII)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_equal
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     m_lua_Lua
 * Method:    rawequal
 * Signature: (JII)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_rawequal
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     m_lua_Lua
 * Method:    lessthan
 * Signature: (JII)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_lessthan
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     m_lua_Lua
 * Method:    toNumber
 * Signature: (JI)D
 */
JNIEXPORT jdouble JNICALL Java_m_lua_Lua_toNumber
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    toInteger
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_toInteger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    toBoolean
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_m_lua_Lua_toBoolean
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    toString
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_m_lua_Lua_toString
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    objlen
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_objlen
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    toThread
 * Signature: (JI)J
 */
JNIEXPORT jlong JNICALL Java_m_lua_Lua_toThread
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    pushNil
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_pushNil
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    pushNumber
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_pushNumber
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     m_lua_Lua
 * Method:    pushInteger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_pushInteger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    pushString
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_pushString__JLjava_lang_String_2
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    pushBoolean
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_pushBoolean
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     m_lua_Lua
 * Method:    getTable
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_getTable
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    getField
 * Signature: (JILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_getField
  (JNIEnv *, jobject, jlong, jint, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    rawGet
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_rawGet
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    rawGetI
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_rawGetI
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     m_lua_Lua
 * Method:    createTable
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_createTable
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     m_lua_Lua
 * Method:    getMetaTable
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_getMetaTable
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    getFEnv
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_getFEnv
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    setTable
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_setTable
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    setField
 * Signature: (JILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_setField
  (JNIEnv *, jobject, jlong, jint, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    rawSet
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_rawSet
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    rawSetI
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_rawSetI
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     m_lua_Lua
 * Method:    setMetaTable
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_setMetaTable
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    setFEnv
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_setFEnv
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    call
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_call
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     m_lua_Lua
 * Method:    pcall
 * Signature: (JIII)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_pcall
  (JNIEnv *, jobject, jlong, jint, jint, jint);

/*
 * Class:     m_lua_Lua
 * Method:    yield
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_yield
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    resume
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_resume
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    status
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_status
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    gc
 * Signature: (JII)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_gc
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     m_lua_Lua
 * Method:    error
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_error
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    next
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_next
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    concat
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_concat
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    pop
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_pop
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    newTable
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_newTable
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    strlen
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_strlen
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    isFunction
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_m_lua_Lua_isFunction
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    isTable
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_m_lua_Lua_isTable
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    isNil
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_m_lua_Lua_isNil
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    isBoolean
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_m_lua_Lua_isBoolean
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    isThread
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_m_lua_Lua_isThread
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    isNone
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_m_lua_Lua_isNone
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    isNoneOrNil
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_m_lua_Lua_isNoneOrNil
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    setGlobal
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_setGlobal
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    getGlobal
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_getGlobal
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    getGcCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_getGcCount
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    LdoFile
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_LdoFile
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    LdoString
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_LdoString
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    LgetMetaField
 * Signature: (JILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_LgetMetaField
  (JNIEnv *, jobject, jlong, jint, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    LcallMeta
 * Signature: (JILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_LcallMeta
  (JNIEnv *, jobject, jlong, jint, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    Ltyperror
 * Signature: (JILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_Ltyperror
  (JNIEnv *, jobject, jlong, jint, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    LargError
 * Signature: (JILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_LargError
  (JNIEnv *, jobject, jlong, jint, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    LcheckString
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_m_lua_Lua_LcheckString
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    LoptString
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_m_lua_Lua_LoptString
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    LcheckNumber
 * Signature: (JI)D
 */
JNIEXPORT jdouble JNICALL Java_m_lua_Lua_LcheckNumber
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    LoptNumber
 * Signature: (JID)D
 */
JNIEXPORT jdouble JNICALL Java_m_lua_Lua_LoptNumber
  (JNIEnv *, jobject, jlong, jint, jdouble);

/*
 * Class:     m_lua_Lua
 * Method:    LcheckInteger
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_LcheckInteger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    LoptInteger
 * Signature: (JII)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_LoptInteger
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     m_lua_Lua
 * Method:    LcheckStack
 * Signature: (JILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_LcheckStack
  (JNIEnv *, jobject, jlong, jint, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    LcheckType
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_LcheckType
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     m_lua_Lua
 * Method:    LcheckAny
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_LcheckAny
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    LnewMetatable
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_LnewMetatable
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    LgetMetatable
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_LgetMetatable
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    Lwhere
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_Lwhere
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    Lref
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_Lref
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    LunRef
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_LunRef
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     m_lua_Lua
 * Method:    LgetN
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_LgetN
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     m_lua_Lua
 * Method:    LsetN
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_LsetN
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     m_lua_Lua
 * Method:    LloadFile
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_LloadFile
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    LloadBuffer
 * Signature: (J[BJLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_LloadBuffer
  (JNIEnv *, jobject, jlong, jbyteArray, jlong, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    LloadString
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_m_lua_Lua_LloadString
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    Lgsub
 * Signature: (JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_m_lua_Lua_Lgsub
  (JNIEnv *, jobject, jlong, jstring, jstring, jstring);

/*
 * Class:     m_lua_Lua
 * Method:    LfindTable
 * Signature: (JILjava/lang/String;I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_m_lua_Lua_LfindTable
  (JNIEnv *, jobject, jlong, jint, jstring, jint);

/*
 * Class:     m_lua_Lua
 * Method:    openBase
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_openBase
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    openTable
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_openTable
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    openIo
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_openIo
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    openOs
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_openOs
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    openString
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_openString
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    openMath
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_openMath
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    openDebug
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_openDebug
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    openPackage
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_openPackage
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    openLibs
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_openLibs
  (JNIEnv *, jobject, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    newUserData
 * Signature: (JLjava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_m_lua_Lua_newUserData
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     m_lua_Lua
 * Method:    getFunctionWrapper
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_m_lua_Lua_getFunctionWrapper
  (JNIEnv *, jobject);

/*
 * Class:     m_lua_Lua
 * Method:    getGCWrapper
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_m_lua_Lua_getGCWrapper
  (JNIEnv *, jobject);

/*
 * Class:     m_lua_Lua
 * Method:    pushCFunction
 * Signature: (JJ)V
 */
 JNIEXPORT void JNICALL Java_m_lua_Lua_pushCFunction
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     m_lua_Lua
 * Method:    toUserData
 * Signature: (JI)Ljava/lang/Object;
 */
JNIEXPORT jobject JNICALL Java_m_lua_Lua_toUserData
  (JNIEnv *, jobject, jlong, jint);

#ifdef __cplusplus
}
#endif
#endif
